// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/airport/{airportCode}/averages": {
            "get": {
                "description": "Get averages of measures (temperature, pressure, wind) for a specific date",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "airport"
                ],
                "summary": "Return three averages (temperature, pressure, wind) for a specific date",
                "parameters": [
                    {
                        "type": "string",
                        "description": "airport code IATA",
                        "name": "airportCode",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "start date (example : 2021-04-04)",
                        "name": "date",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Average"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/airport/{airportCode}/measure": {
            "get": {
                "description": "Get measurements of a certain type (temperature, wind, pressure) that are between two time (date + time)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "airport"
                ],
                "summary": "Return a list of value for one type (temperature, wind, pressure) between two time",
                "parameters": [
                    {
                        "type": "string",
                        "description": "airport code IATA",
                        "name": "airportCode",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "sensor type (temperature, wind, pressure)",
                        "name": "type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "start date (example : 2021-04-04T22:08:41Z)",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "end date (example : 2021-04-04T22:08:41Z)",
                        "name": "endDate",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Measure"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/airports": {
            "get": {
                "description": "Return all the airport in DB",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "airport"
                ],
                "summary": "Return all the airport in DB",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helper.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "helper.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "model.Average": {
            "type": "object",
            "properties": {
                "average": {
                    "type": "number"
                },
                "sensortype": {
                    "type": "string"
                },
                "unit": {
                    "type": "string"
                }
            }
        },
        "model.Measure": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "airportid": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "sensorid": {
                    "type": "string"
                },
                "sensortype": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
